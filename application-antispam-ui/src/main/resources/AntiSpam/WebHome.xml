<?xml version="1.1" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.3" reference="AntiSpam.WebHome" locale="">
  <web>AntiSpam</web>
  <name>WebHome</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <parent>Main.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <version>1.1</version>
  <title>Delete Spam User and Pages</title>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{velocity output='false'}}
## --------------------------------------------
## Displays a document reference as a list item
## --------------------------------------------
#macro(displayReference $documentReference $lastAuthorReference $isCleaningInProgress)
  #if ("$!request.check" != '')
    #set ($refDoc = $xwiki.getDocument($documentReference))
    ## Note: We should use the following instead but it's currently too time-consuming:
    ##   #set ($isSpam = $services.antispam.isSpam('simple', $refDoc, {}))
    #set ($isSpam = $services.antispam.isSpam('simple', "${refDoc.fullName}\n${refDoc.title}\n${refDoc.content}", {}))
    #if ($isSpam)
      * (% style='color:green' %){{{$documentReference}}}
    #else
      * (% style='color:red' %){{{$documentReference}}} {{error}}Not spam content! You may need to add keywords!{{/error}}
    #end
  #else
    #if ($isCleaningInProgress)
      #set ($outputMarkup = "{{{$documentReference}}}")
    #else
      #set ($outputMarkup = "[[{{{$documentReference}}}&gt;&gt;$documentReference]]")
    #end
    #if ($services.antispam.isProtectedUser($lastAuthorReference, $documentReference))
      #set ($outputMarkup = "${outputMarkup} {{error}}This change was made by [$lastAuthorReference] and won't be removed since it's a protected user!{{/error}}")
    #end
    * $outputMarkup
  #end
#end
## -----------------------------------------------------
## Clean a document from spam and displays errors if any
## -----------------------------------------------------
#macro(cleanDocument $documentReference $authorReference)
  #try()
    #set ($discard = $services.antispam.cleanDocument($documentReference, [$authorReference], true))
    #if ($services.antispam.isProtectedUser($authorReference, $documentReference))
      ** Not cleaned!
    #else
      ** Cleaned!
    #end
  #end
  #if ("$!exception" != '')
    #displayException('Failed to remove spam from [${documentReference}]', $exception)
  #end
#end
## -----------------------------
## Displays an EventStream event
## -----------------------------
#macro(displayEvent $event $isProtectedUser $isForm)
  #if ($xwiki.exists($event.user))
    #set ($userText = "[[$event.user&gt;&gt;$event.user]]")
  #elseif ("$!event.user" != '')
    #set ($userText = "$event.user")
  #else
    #set ($userText = "Guest")
  #end
  #if ("$!event.document" != '')
    #if ($xwiki.exists($event.document))
      #set ($viewRevURL = $xwiki.getURL($event.document, 'viewrev', "rev=${event.documentVersion}"))
      #set ($diffURL = $xwiki.getURL($event.document, 'viewrev', "viewer=changes&amp;rev2=${event.documentVersion}"))
      #set ($documentText = "[[$event.document (v${event.documentVersion})&gt;&gt;path:$viewRevURL]] ([[diff&gt;&gt;path:$diffURL]])")
    #else
      #set ($documentText = "$event.document (v${event.documentVersion})")
    #end
    #set ($outputMarkup = "{{{$event.date}}} - ${userText} - ${documentText} - {{{$event.type}}}")
  #else
    #set ($outputMarkup = "{{{$event.date}}} - ${userText} - {{{$event.type}}}")
  #end
  #if ($isProtectedUser)
    #set ($outputMarkup = "${outputMarkup} {{error}}Event won't be removed since it's been made by an Admin{{/error}}")
  #end
  #if ($isForm)
    &lt;div&gt;
      &lt;input type="checkbox" id="$event.id" name="event-${event.id}"/&gt;
      &lt;label for="$event.id"&gt;$outputMarkup&lt;/label&gt;
    &lt;/div&gt;
  #else
    * $outputMarkup
  #end
#end
## ---------------------------------------------------------
## Displays an EventStream with checkboxes to remove entries
## ---------------------------------------------------------
#macro(displayEventStream $query $filterFeature $filterKnownUsers $filterUserPages $filterPlayground $filterAntispamPages $filterCreateEvents)
  ## Note: Requires Programming Rights
  #set ($events = $services.antispam.searchEvents($query))

  {{html wiki='true'}}
  &lt;form id="events" class="xform"&gt;
    #if ($filterFeature)
      &lt;div&gt;
        &lt;input type="checkbox" id="filterKnownUsers" name="filterKnownUsers" #if ($filterKnownUsers)checked#end/&gt;
        &lt;label for="filterKnownUsers"&gt;Filter out known users&lt;/label&gt;
        &lt;input type="checkbox" id="filterUserPages" name="filterUserPages" #if ($filterUserPages)checked#end/&gt;
        &lt;label for="filterUserPages"&gt;Filter out user pages&lt;/label&gt;
        &lt;input type="checkbox" id="filterPlaygrounds" name="filterPlaygrounds" #if ($filterPlaygrounds)checked#end/&gt;
        &lt;label for="filterPlaygrounds"&gt;Filter out playgrounds&lt;/label&gt;
        &lt;input type="checkbox" id="filterAntispamPages" name="filterAntispamPages" #if ($filterAntispamPages)checked#end/&gt;
        &lt;label for="filterAntispamPages"&gt;Filter out AntiSpam pages&lt;/label&gt;
        &lt;input type="checkbox" id="filterCreateEvents" name="filterCreateEvents" #if ($filterCreateEvents)checked#end/&gt;
        &lt;label for="filterCreateEvents"&gt;Filter out non-create events&lt;/label&gt;
        ## CSRF protection
        &lt;input type="hidden" name="form_token" value="$!{services.csrf.getToken()}" /&gt;
      &lt;/div&gt;
      &lt;p/&gt;
    #end
    #foreach ($event in $events)
      #displayEvent($event, false, true)
    #end
    #if ($events.isEmpty())
      No events
    #end
    &lt;div&gt;
      &lt;span class="buttonwrapper"&gt;&lt;input type="submit" name="deleteEvents" value="Delete Selected Events"
        class="button btn-danger"/&gt;&lt;/span&gt;
    &lt;/div&gt;
  &lt;/form&gt;
  {{/html}}

#end
## ---------------------------------------------------------
## Display/Clean passed authors, pages from them + events
## ---------------------------------------------------------
#macro(displayAndClean $lastAuthorReferences $isCleaningInProgress)
  == Authors ==
  Authors of pages containing the search term.

  #set ($validAuthorReferences = [])
  #foreach ($lastAuthorReference in $lastAuthorReferences)
    #if ($services.antispam.isProtectedUser($lastAuthorReference, $doc.documentReference))
      * {{{$lastAuthorReference}}} {{error}}Excluded for safety since the user has protected access to the page{{/error}}
    #elseif (!$xwiki.exists($lastAuthorReference))
      ## Remove non-existing author pages (they could have been removed already)
      * {{{$lastAuthorReference}}} {{error}}Excluded as the profile page doesn't exist{{/error}}
    #else
      #if ($isCleaningInProgress)
        * {{{$lastAuthorReference}}}
        #if (!$cleanedReferences.contains($lastAuthorReference))
          #set ($userDoc = $xwiki.getDocument($lastAuthorReference))
          #set ($discard = $xwiki.getXWiki().deleteAllDocuments($userDoc.getDocument(), false, $xcontext.getContext()))
          ## TODO: Find a way to reuse the new job to delete users.
          ##set ($discard = $services.antispam.cleanAuthors([$lastAuthorReference]))
          #set ($discard = $cleanedReferences.add($lastAuthorReference))
          ** Deleted!
        #else
          ** Page already cleaned!
        #end
      #else
        * [[{{{$lastAuthorReference}}}&gt;&gt;$lastAuthorReference]]
      #end
      #set ($discard = $validAuthorReferences.add($lastAuthorReference))
    #end
  #end
  #if ($lastAuthorReferences.isEmpty())
    No authors
  #end
  ## Exclude Admin authors from the rest below since:
  ## - We don't want to list pages modified by Admin authors
  ## - We don't want to list events done by Admin authors
  == Related Pages ==
  Pages created or last modified by the listed authors above (excluding Admin ones and authors with no profile page).

  #set ($itemCounter = 0)
  #foreach ($validAuthorReference in $validAuthorReferences)
    #set ($documentReferences = $services.antispam.getDocumentsForAuthor($validAuthorReference, 500, 0))
    #foreach ($documentReference in $documentReferences)
      ## Only handle pages that were not matching above as those have already been taken care of!
      #if (!$cleanedReferences.contains($documentReference))
        #set ($itemCounter = $itemCounter + 1)
        #displayReference($documentReference, $validAuthorReference, $isCleaningInProgress)
        #if ($isCleaningInProgress)
          #cleanDocument($documentReference, $validAuthorReference)
          #set ($discard = $cleanedReferences.add($validAuthorReference))
        #end
      #end
    #end
  #end
  #if ($itemCounter == 0)
    No related pages
  #end
  == Events ==
  Events from authors listed above (excluding Admin ones and authors with no profile page).

  #if ($validAuthorReferences.isEmpty())
    No events
  #end
  #foreach ($validAuthorReference in $validAuthorReferences)
    Events for user: [[{{{$validAuthorReference}}}&gt;&gt;$validAuthorReference]]
    #set ($isProtectedUser = $services.antispam.isProtectedUser($validAuthorReference, $doc.documentReference))
    #set ($userAsString = $services.model.serialize($validAuthorReference, 'default'))
    #set ($query = $services.antispam.createEventQuery())
    #set ($query = $query.eq('user', $userAsString))
    #set ($query = $query.addSort('date', 'DESC'))
    #set ($query = $query.setLimit(500))    
    #if (!$isCleaningInProgress)
      #displayEventStream($query, false, false, false)
    #else
      #set ($events = $services.antispam.searchEvents($query))
      #foreach ($event in $events)
        #displayEvent($event, $isProtectedUser, false)
        #if (!$isProtectedUser)
          #set ($discard = $services.antispam.deleteEvent($event).get())
          ** Event deleted
        #end
      #end
      #if ($events.isEmpty())
        No events
      #end
    #end
  #end
#end
{{/velocity}}

{{velocity}}
#if ("$!request.findInactiveUsers" == 'Find Inactive Users')
  $response.sendRedirect($xwiki.getURL('AntiSpam.CleanInactiveUsers'))
#end

{{html}}
&lt;form id="search" class="xform"&gt;
  &lt;div&gt;&lt;input type="text" name="query" placeholder="Search..." value="$!request.query"/&gt;&lt;/div&gt;
  &lt;div&gt;&lt;input type="text" name="user" placeholder="User..." value="$!request.user"/&gt;&lt;/div&gt;
  ## CSRF protection
  &lt;input type="hidden" name="form_token" value="$!{services.csrf.getToken()}" /&gt;
  &lt;div&gt;
    &lt;span class="buttonwrapper"&gt;&lt;input type="submit" name="searchSpam" value="Search"
      class="button"/&gt;&lt;/span&gt;
    &lt;span class="buttonwrapper"&gt;&lt;input type="submit" name="showas" value="Show Activity Stream"
      class="button"/&gt;&lt;/span&gt;
    &lt;span class="buttonwrapper"&gt;&lt;input type="submit" name="findInactiveUsers" value="Find Inactive Users"
      class="button"/&gt;&lt;/span&gt;
    #if ("$!request.query" != '' || "$!request.user" != '')
      &lt;span class="buttonwrapper"&gt;&lt;input type="submit" name="check" value="Check for Spam"
        class="button"/&gt;&lt;/span&gt;
      &lt;span class="buttonwrapper"&gt;&lt;input type="submit" name="delete" value="Delete"
        class="button btn-danger"/&gt;&lt;/span&gt;
    #end
    #if ("$!request.delete" != '')
      &lt;input type="submit" name="confirmDelete" value="Confirm Delete" class="button btn-danger"/&gt;
    #end
  &lt;/div&gt;
&lt;/form&gt;
{{/html}}

{{box cssClass="floatinginfobox" title="**Configuration**"}}
* [[Spam Keywords&gt;&gt;Keywords]]
* [[Space Excludes&gt;&gt;Excludes]]
* [[Known Users&gt;&gt;KnownUsers]]
* [[Known Groups&gt;&gt;KnownGroups]]
{{/box}}

{{box cssClass="floatinginfobox" title="**Results**"}}
* [[Banned IP Addresses&gt;&gt;IPAddresses]]
* [[Disabled Spam Users&gt;&gt;DisabledUsers]]
#if ($xwiki.exists('Logs'))
  * [[Logs&gt;&gt;Logs]]
#end
{{/box}}

## Don't do any action if there's no valid CSRF token
#set ($validCSRFToken = $services.csrf.isTokenValid($request.form_token))

## ----------------------
## Delete events if asked
## ----------------------
#if ("$!request.deleteEvents" == 'Delete Selected Events' &amp;&amp; $validCSRFToken)
  #foreach ($parameterName in $request.parameterNames)
    #if ($parameterName.startsWith('event-'))
      ## Delete matching event
      #set ($eventId = $stringtool.substringAfter($parameterName, 'event-'))
      #set ($discard = $services.antispam.deleteEvent($eventId).get())
    #end
  #end
#end
## -------------------------------------------------------------------
## Display documents and users matching spam keyword and users entered
## -------------------------------------------------------------------
#set ($filterKnownUsers = $request.filterKnownUsers == 'on')
#set ($filterUserPages = $request.filterUserPages == 'on')
#set ($filterPlaygrounds = $request.filterPlaygrounds == 'on')
#set ($filterAntispamPages = $request.filterAntispamPages == 'on')
#set ($filterCreateEvents = $request.filterCreateEvents == 'on')
#if (("$!request.query" == '' &amp;&amp; "$!request.user" == '') || "$!request.showas" != '')
  == Latest Changes ==
  #set ($query = $services.antispam.createEventQuery())
  #if ($filterUserPages)
    #set ($query = $query.not().eq('space', 'XWiki'))
  #end
  #if ($filterAntispamPages)
    #set ($query = $query.not().eq('space', 'AntiSpam'))
  #end
  #if ($filterPlaygrounds)
    #set ($query = $query.not().eq('wiki', 'playground'))
    #set ($query = $query.not().eq('wiki', 'xclams'))
  #end
  #if ("$!request.wikis" != '')
    ## TODO: verify this works if the user passes a comma-separated list of wikis
    #set ($query = $query.not().in('wiki', $request.wikis))
  #end
  #if ($filterKnownUsers)
    #set ($query = $query.not().in('user', $services.antispam.knownUserReferences))
    ## Use a relative reference so that we can find all superadmin users from all subwikis (there's currently a
    ## bug in several parts of the XWiki code leading to the superadmin user being stored in the event store,
    ## resolved on the current wiki, leading to references like "somewiki:XWiki.superadmin").
    ## This allows to search in the Solr Event store using SimpleEventQuery#endsWith('user', 'XWiki.superadmin').
    ## TODO: Remove once XWiki is fixed to never store a superadmin user resolved on the current wiki and the
    ## antispam app parent version has been upgraded to a version containing the fix.
    ## See for example: https://jira.xwiki.org/browse/XWIKI-21651
    #set ($query = $query.not().endsWith('user', 'XWiki.superadmin'))
  #end
  #if ($filterCreateEvents)
    #set ($query = $query.eq('type', 'create'))
  #end
  #set ($query = $query.addSort('date', 'DESC'))
  #if ("$!request.offset" != '')
    #set ($query = $query.setOffset($request.offset))
  #end
  #displayEventStream($query.setLimit(50), true, $filterKnownUsers, $filterUserPages, $filterPlaygrounds, $filterAntispamPages, $filterCreateEvents)
#end

#if (!$validCSRFToken)
  #break
#end

## Starting with XWiki 11.x (don't recall the exact version, $collectionstool was deprecated/removed).
## Let's support all versions of XWiki.
#set ($cleanedReferences = $collectiontool.set)
#if ("$!cleanedReferences" == '')
  #set ($cleanedReferences = $collectionstool.set)
#end
#set ($isCleaningInProgress = "$!request.confirmDelete" != '')
#if ("$!request.query" != '')
  == Matching Pages ==
  Pages containing the search term in their last revisions.

  ## Note: we make sure to surround the query string by quotes to avoid users deleting unwanted pages
  ## (since searching for example for "mcafee phone" without the quotes will search for documents 
  ## containing "mcafee" OR "phone").
  #set ($matchingReferences = $services.antispam.getMatchingDocuments("""$request.query""", 500, 0))
  #foreach ($matchingReference in $matchingReferences)
    #displayReference($matchingReference.documentReference, $matchingReference.lastAuthorReference, $isCleaningInProgress)
    #if ($isCleaningInProgress)
      #cleanDocument($matchingReference.documentReference, $matchingReference.lastAuthorReference)
      #set ($discard = $cleanedReferences.add($matchingReference.documentReference))
    #end
  #end
  #if ($matchingReferences.isEmpty())
    No matching pages
  #end
  #set ($lastAuthorReferences = $services.antispam.getLastAuthorReferences($matchingReferences))
  #displayAndClean($lastAuthorReferences, $isCleaningInProgress)
#end
## -------------------------------------------------------------------
## Display documents modified by user entered in search, if specified
## -------------------------------------------------------------------
#if ("$!request.user" != '')
  #set ($userReference = $services.model.resolveDocument($request.user, 'user'))
  #displayAndClean([$userReference], $isCleaningInProgress)
#end
{{/velocity}}</content>
  <object>
    <name>AntiSpam.WebHome</name>
    <number>0</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>9d21ef2b-c5be-426c-8485-658466d369fa</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <customDisplay/>
        <defaultValue>long</defaultValue>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <picker>0</picker>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <sort>none</sort>
        <unmodifiable>0</unmodifiable>
        <validationMessage/>
        <validationRegExp/>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <contenttype>PureText</contenttype>
        <customDisplay/>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>code</name>
        <number>2</number>
        <picker>0</picker>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <validationMessage/>
        <validationRegExp/>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <customDisplay/>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <picker>0</picker>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <validationMessage/>
        <validationRegExp/>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <customDisplay/>
        <defaultValue/>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <validationMessage/>
        <validationRegExp/>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <customDisplay/>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <picker>0</picker>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <sort>none</sort>
        <unmodifiable>0</unmodifiable>
        <validationMessage/>
        <validationRegExp/>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>require(['jquery'], function($) {
  $('#filterKnownUsers').change(function() {
    $('#events').submit();
  })
  $('#filterUserPages').change(function() {
    $('#events').submit();
  })
  $('#filterPlaygrounds').change(function() {
    $('#events').submit();
  })
  $('#filterAntispamPages').change(function() {
    $('#events').submit();
  })
  $('#filterCreateEvents').change(function() {
    $('#events').submit();
  })
});

</code>
    </property>
    <property>
      <name/>
    </property>
    <property>
      <parse>0</parse>
    </property>
    <property>
      <use>currentPage</use>
    </property>
  </object>
</xwikidoc>
