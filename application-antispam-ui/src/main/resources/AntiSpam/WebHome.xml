<?xml version="1.0" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.3">
  <web>AntiSpam</web>
  <name>WebHome</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <parent>Main.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <version>1.1</version>
  <title>Delete Spam User and Pages</title>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{velocity}}
{{html}}
&lt;form class="xform"&gt;
  &lt;div&gt;&lt;input type="text" name="query" placeholder="Search..." value="$!request.query"/&gt;&lt;/div&gt;
  &lt;div&gt;&lt;input type="text" name="user" placeholder="User..." value="$!request.user"/&gt;&lt;/div&gt;
  &lt;div&gt;
    &lt;span class="buttonwrapper"&gt;&lt;input type="submit" name="searchSpam" value="Search" class="button"/&gt;&lt;/span&gt;
    &lt;span class="buttonwrapper"&gt;&lt;input type="submit" name="showas" value="Show Activity Stream" class="button"/&gt;&lt;/span&gt;
    #if ("$!request.query" != '' || "$!request.user" != '')
      &lt;span class="buttonwrapper"&gt;&lt;input type="submit" name="check" value="Check for Spam" class="button"/&gt;&lt;/span&gt;
      &lt;span class="buttonwrapper"&gt;&lt;input type="submit" name="delete" value="Delete" class="button"/&gt;&lt;/span&gt;
    #end
    #if ("$!request.delete" != '')
      &lt;input class="btn btn-danger" type="submit" name="confirmDelete" value="Confirm Delete" class="button btn-danger"/&gt;
    #end
  &lt;/div&gt;
&lt;/form&gt;
{{/html}}

{{box cssClass="floatinginfobox" title="**Configuration**"}}
* [[Spam Keywords&gt;&gt;Keywords]]
* [[Space Excludes&gt;&gt;Excludes]]
{{/box}}

{{box cssClass="floatinginfobox" title="**Results**"}}
* [[Banned IP Addresses&gt;&gt;IPAddresses]]
* [[Disabled Spam Users&gt;&gt;DisabledUsers]]
#if ($xwiki.exists('Logs'))
  * [[Logs&gt;&gt;Logs]]
#end
{{/box}}

#macro(displayReference $documentReference $lastAuthorReference)
  #if ("$!request.check" != '')
    #set ($refDoc = $xwiki.getDocument($documentReference))
    ## Note: We should use the following instead but it's currently too time-consuming:
    ##   #set ($isSpam = $services.antispam.isSpam('simple', $refDoc, {}))
    #set ($isSpam = $services.antispam.isSpam('simple', "${refDoc.fullName}\n${refDoc.title}\n${refDoc.content}", {}))
    #if ($isSpam)
      * (% style='color:green' %){{{$documentReference}}}
    #else
      * (% style='color:red' %){{{$documentReference}}} {{error}}Not spam content! You may need to add keywords!{{/error}}
    #end
  #else
    #set ($outputMarkup = "[[{{{$documentReference}}}>>$documentReference]]")
    #if ($services.security.authorization.hasAccess('ADMIN', $lastAuthorReference, $documentReference))
      #set ($outputMarkup = "(% style='color:red' %)${outputMarkup}(%%) (% style='color:red' %)Won't be removed since its last author is an Admin(%%)")
    #end
    * $outputMarkup
  #end
#end
#macro(cleanDocument $documentReference $authorReferences)
  #try()
    #set ($discard = $services.antispam.cleanDocument($documentReference, $authorReferences, true))
    ** Cleaned!
  #end
  #if ("$!exception" != '')
    #displayException('Failed to remove spam from [${documentReference}]', $exception)
  #end
#end
#macro(displayEvent $event $isAdminReference)
  #if ($xwiki.exists($event.document))
    #set ($viewRevURL = $xwiki.getURL($event.document, 'viewrev', "rev=${event.documentVersion}"))
    #set ($diffURL = $xwiki.getURL($event.document, 'viewrev', "viewer=changes&amp;rev2=${event.documentVersion}"))
    #set ($documentText = "[[$event.document (v${event.documentVersion})>>path:$viewRevURL]] ([[diff>>path:$diffURL]])")
  #else
    #set ($documentText = "$event.document (v${event.documentVersion})")
  #end
  #if ($xwiki.exists($event.user))
    #set ($userText = "[[$event.user>>$event.user]]")
  #else
    #set ($userText = "$event.user")
  #end
  #set ($outputMarkup = "{{{$event.date}}} - ${userText} - ${documentText} - {{{$event.type}}}")
  #if ($isAdminReference)
    #set ($outputMarkup = "(% style='color:red' %)${outputMarkup}(%%) (% style='color:red' %)Won't be removed since its last author is an Admin(%%)")
  #end
  * $outputMarkup
#end
#if (("$!request.query" == '' &amp;&amp; "$!request.user" == '') || "$!request.showas" != '')
  == Latest Changes ==
  #set ($query = $services.query.xwql("order by event.date desc").setLimit(50))
  ## Note: Requires Programming Rights
  #set ($eventStream = $services.component.getInstance('org.xwiki.eventstream.EventStream'))
  #set ($events = $eventStream.searchEvents($query))
  #foreach ($event in $events)
    #displayEvent($event)
  #end
#end
## Starting with XWiki 11.x (don't recall the exact version, $collectionstool was deprecated/removed).
## Let's support all versions of XWiki.
#set ($cleanedReferences = $collectiontool.set)
#if ("$!cleanedReferences" == '')
  #set ($cleanedReferences = $collectionstool.set)
#end
#if ("$!request.query" != '')
  == Matching Pages ==
  ## Note: we make sure to surround the query string by quotes to avoid users deleting unwanted pages
  ## (since searching for example for "mcafee phone" without the quotes will search for documents 
  ## containing "mcafee" OR "phone").
  #set ($matchingReferences = $services.antispam.getMatchingDocuments("""$request.query""", 500, 0))
  #set ($lastAuthorReferences = $services.antispam.getLastAuthorReferences($matchingReferences))
  #foreach ($matchingReference in $matchingReferences)
    #displayReference($matchingReference.documentReference, $matchingReference.lastAuthorReference)
    #if ("$!request.confirmDelete" != '')
      #cleanDocument($matchingReference.documentReference, $lastAuthorReferences, true)
      #set ($discard = $cleanedReferences.add($matchingReference.documentReference))
    #end
  #end
  == Authors ==
  #foreach ($lastAuthorReference in $lastAuthorReferences)
    #if ($services.security.authorization.hasAccess('ADMIN', $lastAuthorReference, $doc.documentReference))
      * {{{$lastAuthorReference}}} {{error}}Excluding for safety since it has Admin access to this page{{/error}}
    #else
      * [[{{{$lastAuthorReference}}}>>$lastAuthorReference]]
      #if ("$!request.confirmDelete" != '')
        #if (!$cleanedReferences.contains($lastAuthorReference))
          #set ($userDoc = $xwiki.getDocument($lastAuthorReference))
          #set ($discard = $xwiki.getXWiki().deleteAllDocuments($userDoc.getDocument(), false, $xcontext.getContext()))
          #set ($discard = $cleanedReferences.add($lastAuthorReference))
          ** Deleted!
        #else
          ** Page already cleaned!
        #end
      #end
    #end
  #end
  == Pages created or modified by those Authors ==
  #foreach ($lastAuthorReference in $lastAuthorReferences)
    #set ($documentReferences = $services.antispam.getDocumentsForAuthor($lastAuthorReference, 500, 0))
    #foreach ($documentReference in $documentReferences)
      ## Only handle pages that were not matching above as those have already been taken care of!
      #if (!$cleanedReferences.contains($documentReference))
        #displayReference($documentReference, $lastAuthorReference)
        #if ("$!request.confirmDelete" != '')
          #cleanDocument($documentReference, $lastAuthorReferences, true)
          #set ($discard = $cleanedReferences.add($lastAuthorReference))
        #end
      #end
    #end
  #end
  == Events ==
  #foreach ($lastAuthorReference in $lastAuthorReferences)
    #set ($isAdminReference = false)
    #if ($services.security.authorization.hasAccess('ADMIN', $lastAuthorReference, $doc.documentReference))
      #set ($isAdminReference = true)
    #end
    #set ($userAsString = $services.model.serialize($lastAuthorReference, 'default'))
    #set ($query = $services.query.xwql("where event.user = :user order by event.date desc"))
    #set ($query = $query.bindValue('user', $userAsString).setLimit(500))
    ## Note: Requires Programming Rights
    #set ($eventStream = $services.component.getInstance('org.xwiki.eventstream.EventStream'))
    #set ($events = $eventStream.searchEvents($query))
    #foreach ($event in $events)
      #displayEvent($event, $isAdminReference)
      #if ("$!request.confirmDelete" != '' &amp;&amp; !$isAdminReference)
        #set ($discard = $eventStream.deleteEvent($event))
        ** Event deleted
      #end
    #end
  #end
#end
#if ("$!request.user" != '')
  == Pages modified by user: [$request.user] ==
  #set ($userReference = $services.model.resolveDocument($request.user, 'user'))
  #set ($documentReferences = $services.antispam.getDocumentsForAuthor($userReference, 500, 0))
  #foreach ($documentReference in $documentReferences)
    ## Only handle pages that were not matching above as those have already been taken care of!
    #if (!$cleanedReferences.contains($documentReference))
      #displayReference($documentReference, $userReference)
      #if ("$!request.confirmDelete" != '')
        #cleanDocument($documentReference, [$userReference], true)
      #end
    #end
  #end
#end
{{/velocity}}</content>
</xwikidoc>
